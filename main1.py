import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import psycopg2
import time

db_conf = {
    'user': 'your_db_user',
    'password': 'your_db_password',
    'database': 'your_database_name',
    'host': 'your_db_host',
    'port': 5432
}
TOKEN = "7014899022:AAEddAEJBNhGZsLNRqBu_JEOk1CtUp_OkTg"


class Item:
    def __init__(self, name, cost, effect, level):
        self.name = name
        self.cost = cost
        self.effect = effect
        self.level = level


class Shop:
    def __init__(self):
        self.worker_cost = 100
        self.pickaxes = [
            Item("–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫–∏—Ä–∫–∞", 50, 5, 1),
            Item("–ë—Ä–æ–Ω–∑–æ–≤–∞—è –∫–∏—Ä–∫–∞", 100, 10, 3),
            Item("–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∫–∞", 200, 20, 6),
            Item("–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –∫–∏—Ä–∫–∞", 400, 40, 12),
            Item("–ó–æ–ª–æ—Ç–∞—è –∫–∏—Ä–∫–∞", 800, 80, 24),
            Item("–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è –∫–∏—Ä–∫–∞", 1600, 160, 48),
            Item("–ê–ª–º–∞–∑–Ω–∞—è –∫–∏—Ä–∫–∞", 3200, 320, 96),
            Item("–¢–∏—Ç–∞–Ω–æ–≤–∞—è –∫–∏—Ä–∫–∞", 6400, 640, 192),
            Item("–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –∫–∏—Ä–∫–∞", 12800, 1280, 384),
            Item("–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∫–∏—Ä–∫–∞", 25600, 2560, 768)
        ]
        self.swords = [
            Item("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á", 50, 10, 1),
            Item("–ë—Ä–æ–Ω–∑–æ–≤—ã–π –º–µ—á", 100, 20, 3),
            Item("–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á", 200, 40, 6),
            Item("–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –º–µ—á", 400, 80, 12),
            Item("–ó–æ–ª–æ—Ç–æ–π –º–µ—á", 800, 160, 24),
            Item("–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –º–µ—á", 1600, 320, 48),
            Item("–ê–ª–º–∞–∑–Ω—ã–π –º–µ—á", 3200, 640, 96),
            Item("–¢–∏—Ç–∞–Ω–æ–≤—ã–π –º–µ—á", 6400, 1280, 192),
            Item("–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á", 12800, 2560, 384),
            Item("–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—á", 25600, 5120, 768)
        ]


class User:
    def __init__(self, gold=0, exp=0, level=1, workers=2, gold_per_sec=0, exp_per_sec=0, pickaxes=None, swords=None,
                 last_update=None):
        self.gold = gold
        self.exp = exp
        self.level = level
        self.workers = workers
        self.gold_per_sec = gold_per_sec
        self.exp_per_sec = exp_per_sec
        self.pickaxes = pickaxes if pickaxes is not None else []
        self.swords = swords if swords is not None else []
        self.last_update = last_update if last_update is not None else time.time()

    def update_resources(self):
        now = time.time()
        sec = now - self.last_update

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ –∏ –æ–ø—ã—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        self.gold += self.gold_per_sec * sec
        self.exp += self.exp_per_sec * sec

        self.last_update = now  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.level_up()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è

    def level_up(self):
        needed_exp = self.level * 200
        if self.exp >= needed_exp:
            self.exp -= needed_exp
            self.level += 1


class MainBot:
    def __init__(self, token):
        self.bot = Bot(token)
        self.dp = Dispatcher()
        self.shop = Shop()
        self.users = {}

    async def start(self):
        self.dp.message.register(self.start_command, Command(commands=["start"]))
        self.dp.message.register(self.save_command, Command(commands=["save"]))
        self.dp.callback_query.register(self.button_click, lambda c: True)
        await self.bot.delete_webhook(drop_pending_updates=True)
        await self.dp.start_polling(self.bot)

    def get_user(self, user_id):
        if user_id not in self.users:
            self.users[user_id] = User()
        return self.users[user_id]

    async def init_db(self):
        self.conn = psycopg2.connect(**db_conf)
        self.conn.autocommit = True
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                gold REAL DEFAULT 0,
                exp REAL DEFAULT 0,
                level INTEGER DEFAULT 1,
                gold_per_sec REAL DEFAULT 0,
                exp_per_sec REAL DEFAULT 0,
                workers INTEGER DEFAULT 2,
                pickaxes TEXT,
                swords TEXT,
                last_update REAL
            )
        ''')
        cursor.close()

    async def save_command(self, message: types.Message):
        user_id = message.from_user.id
        user = self.get_user(user_id)
        await self.save_user(user_id, user)
        await message.answer("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

    async def save_user(self, user_id, user):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO users (id, gold, exp, level, gold_per_sec, exp_per_sec, workers, pickaxes, swords, last_update)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (id) DO UPDATE SET
                gold = EXCLUDED.gold,
                exp = EXCLUDED.exp,
                level = EXCLUDED.level,
                gold_per_sec = EXCLUDED.gold_per_sec,
                exp_per_sec = EXCLUDED.exp_per_sec,
                workers = EXCLUDED.workers,
                pickaxes = EXCLUDED.pickaxes,
                swords = EXCLUDED.swords,
                last_update = EXCLUDED.last_update
        ''', (user_id, user.gold, user.exp, user.level, user.gold_per_sec, user.exp_per_sec, user.workers,
              ','.join(user.pickaxes), ','.join(user.swords), user.last_update))
        cursor.close()

    async def start_command(self, message: types.Message):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±—ã—á–∞ –∑–æ–ª–æ—Ç–∞ üí∞", callback_data="gold")],
            [InlineKeyboardButton(text="–î–æ–±—ã—á–∞ –æ–ø—ã—Ç–∞ ‚ú®", callback_data="exp")],
            [InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω üõí", callback_data="shop")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å üë§", callback_data="profile")]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=keyboard)

    async def button_click(self, callback_query: types.CallbackQuery):
        user_id = callback_query.from_user.id
        user = self.get_user(user_id)
        user.update_resources()
        action = callback_query.data

        if action == "gold":
            await self.gold_click(callback_query, user)
        elif action == "exp":
            await self.exp_click(callback_query, user)
        elif action == "shop":
            await self.shop_menu(callback_query, user)
        elif action == "profile":
            await self.profile(callback_query, user)
        elif action == "buy_worker":
            await self.buy_worker(callback_query, user)
        elif action == "shop_pickaxes":
            await self.shop_pickaxes_menu(callback_query, user)
        elif action == "shop_swords":
            await self.shop_swords_menu(callback_query, user)
        elif action.startswith("buy_pickaxe"):
            await self.buy_pickaxe(callback_query, user, action)
        elif action.startswith("buy_sword"):
            await self.buy_sword(callback_query, user, action)

    async def gold_click(self, callback_query, user):
        if user.workers <= 0:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö")
        else:
            user.workers -= 1
            user.gold_per_sec += 10
            await callback_query.message.answer(
                f"1 —Ä–∞–±–æ—á–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ–±—ã—á—É –∑–æ–ª–æ—Ç–∞.\n –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}"
            )

    async def exp_click(self, callback_query, user):
        if user.workers <= 0:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö")
        else:
            user.workers -= 1
            user.exp_per_sec += 20
            await callback_query.message.answer(
                f"1 —Ä–∞–±–æ—á–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ–±—ã—á—É –æ–ø—ã—Ç–∞.\n –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}"
            )

    async def shop_menu(self, callback_query, user):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ä–∞–±–æ—á–µ–≥–æ üë∑", callback_data="buy_worker")],
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∫–∏—Ä–∫—É ‚õèÔ∏è", callback_data="shop_pickaxes")],
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –º–µ—á ‚öîÔ∏è", callback_data="shop_swords")]
        ])
        await callback_query.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=keyboard)

    async def profile(self, callback_query, user):
        await callback_query.message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üë§:\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
            f"–û–ø—ã—Ç: {int(user.exp)}/{user.level * 200}\n"
            f"–ó–æ–ª–æ—Ç–æ: {int(user.gold)}\n"
            f"–ó–æ–ª–æ—Ç–æ/—Å: {user.gold_per_sec}\n"
            f"–û–ø—ã—Ç/—Å: {user.exp_per_sec}\n"
            f"–†–∞–±–æ—á–∏–µ: {user.workers}"
        )

    async def buy_worker(self, callback_query, user):
        if user.gold >= self.shop.worker_cost:
            user.gold -= self.shop.worker_cost
            user.workers += 1
            await callback_query.message.answer(f"–í—ã –∫—É–ø–∏–ª–∏ —Ä–∞–±–æ—á–µ–≥–æ. –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö: {user.workers}")
        else:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞")

    async def shop_pickaxes_menu(self, callback_query, user):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{pickaxe.name} - {pickaxe.cost} –∑–æ–ª–æ—Ç–∞",
                                  callback_data=f"buy_pickaxe_{pickaxe.name}")]
            for pickaxe in self.shop.pickaxes
        ])
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∏—Ä–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏", reply_markup=keyboard)

    async def buy_pickaxe(self, callback_query, user, action):
        pickaxe_name = action[len("buy_pickaxe_"):]
        pickaxe = next((p for p in self.shop.pickaxes if p.name == pickaxe_name), None)

        if pickaxe is None:
            await callback_query.message.answer("–ö–∏—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if user.gold < pickaxe.cost:
            await callback_query.message.answer(f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {pickaxe.cost - user.gold} –∑–æ–ª–æ—Ç–∞.")
        elif pickaxe.name in user.pickaxes:
            await callback_query.message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {pickaxe.name}.")
        elif user.level < pickaxe.level:
            await callback_query.message.answer(f"{pickaxe.name} –¥–æ—Å—Ç—É–ø–Ω–∞ —Å —É—Ä–æ–≤–Ω—è {pickaxe.level}.")
        else:
            user.gold -= pickaxe.cost
            user.gold_per_sec += pickaxe.effect
            user.pickaxes.append(pickaxe.name)
            await callback_query.message.answer(f"–í—ã –∫—É–ø–∏–ª–∏ {pickaxe.name}.")

    async def shop_swords_menu(self, callback_query, user):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{sword.name} - {sword.cost} –∑–æ–ª–æ—Ç–∞", callback_data=f"buy_sword_{sword.name}")]
            for sword in self.shop.swords
        ])
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—á –¥–ª—è –ø–æ–∫—É–ø–∫–∏", reply_markup=keyboard)

    async def buy_sword(self, callback_query, user, action):
        sword_name = action[len("buy_sword_"):]
        sword = next((s for s in self.shop.swords if s.name == sword_name), None)

        if sword is None:
            await callback_query.message.answer("–ú–µ—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if user.gold < sword.cost:
            await callback_query.message.answer(f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {sword.cost - user.gold} –∑–æ–ª–æ—Ç–∞.")
        elif sword.name in user.swords:
            await callback_query.message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {sword.name}.")
        elif user.level < sword.level:
            await callback_query.message.answer(f"{sword.name} –¥–æ—Å—Ç—É–ø–µ–Ω —Å —É—Ä–æ–≤–Ω—è {sword.level}.")
        else:
            user.gold -= sword.cost
            user.exp_per_sec += sword.effect
            user.swords.append(sword.name)
            await callback_query.message.answer(f"–í—ã –∫—É–ø–∏–ª–∏ {sword.name}.")


async def main():
    bot = MainBot(TOKEN)
    await bot.init_db()
    await bot.start()


asyncio.run(main())
